9999 4 1
6
BEGIN DATA
BEGIN GenericState 183
183 10
2 3 191 137
1
Receiver_TopLevel
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 118
118 10
9 7 153 102
1
NON_CAN
0 65535 0
149
TEXTBEGIN
    ctx.sendByte(ctx.NCGbyte); 
    ctx.errCnt=0;
    ctx.anotherFile=0;
    ctx.transferringFileD = -1; 
    ctx.closeProb = -1;
    ctx.tm(0);
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 101
101 10
83 60 100 68
1
FirstByteData
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 103
103 10
83 42 100 51
1
EOT
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN FinalState 109
109 10
156 95 160 99
1
FinalState
BEGIN Mesg 111
111 20
91 53 117 62
1
1 1 16777215 65280
108
SER
c == EOT
18
TEXTBEGIN
ctx.sendByte(NAK);
TEXTEND
BEGIN Mesg 113
113 20
95 34 121 41
1
1 1 16777215 65280
110
SER
c==EOT
27
TEXTBEGIN
ctx.closeTransferredFile();
TEXTEND
BEGIN Transition 130
130 40
19 35 19 43
101 129
3 1 1 3
2 95 68 95 69 
0 95 69 95 87 
3 95 87 95 88 
BEGIN Transition 133
133 40
30 51 30 59
129 109
2 3 4 1
2 102 97 103 97 
1 103 97 155 97 
3 155 97 156 97 
BEGIN GenericState 129
129 10
76 88 102 100
1
CondTransientData
0 12632256 0
20
TEXTBEGIN
     POST("*",CONT);
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 131
131 20
75 69 99 89
1
1 1 16777215 65280
130
SER
c==SOH
108
TEXTBEGIN
ctx.getRestBlk();
if (ctx.goodBlk1st) {
     ctx.errCnt=0;
     ctx.anotherFile=0;
}
else ctx.errCnt++;
TEXTEND
BEGIN Mesg 134
134 20
116 84 155 104
1
1 1 16777215 65280
133
CONT
ctx.syncLoss || ctx.errCnt >= errB
142
TEXTBEGIN
ctx.cans();
ctx.closeTransferredFile();
if (ctx.syncLoss)
     ctx.result="LossOfSyncronization";
else
     ctx.result="ExcessiveErrors";
TEXTEND
BEGIN Mesg 137
137 20
105 62 155 83
1
1 1 16777215 65280
136
CONT
!ctx.syncLoss && (ctx.errCnt < errB)
175
TEXTBEGIN
if (ctx.goodBlk) { 
     ctx.sendByte(ACK);
     if (ctx.anotherFile) ctx.sendByte(ctx.NCGbyte);
}
else  ctx.sendByte(NAK);
if (ctx.goodBlk1st) 
     ctx.writeChunk();

TEXTEND
BEGIN Note 138
138 50
154 8 190 28
1
0 0 8454143 128
226
TEXTBEGIN
Simplified Receiver Statechart
9 November 2021
For Kind Medium.
No dropped  characters, 
     no cancellation via keyboard,
     only TM_END timeout.
Copyright (c) 2021 Craig Scratchley
craig_scratchley AT alumni.sfu.ca
TEXTEND
BEGIN Mesg 142
142 20
98 121 193 129
1
1 1 16777215 65280
141
SER

108
TEXTBEGIN
COUT << "Receiver received totally unexpected char #" << c << ": " << (char) c << endl;
exit(EXIT_FAILURE);
TEXTEND
BEGIN GenericState 144
144 10
154 58 171 71
1
CAN
0 65535 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 148
148 20
158 76 188 90
1
1 1 16777215 65280
146
SER
c == CAN
97
TEXTBEGIN
if (ctx.transferringFileD != -1) 
     ctx.closeTransferredFile();
ctx.result="SndCancelled";

TEXTEND
BEGIN Note 149
149 50
121 31 151 64
1
0 0 12632256 128
297
TEXTBEGIN
The entry code:

POST("*",CONT);

in the grey transient states immediately posts a continue (CONT) event that immediately kicks the StateChart out of those states.

Event SER is the event of a character being available from the Medium (simulating a SERial port)
Event TM is a timeout event.
TEXTEND
BEGIN Mesg 151
151 20
163 53 179 64
1
1 1 16777215 65280
150
SER
c==CAN
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 154
154 10
31 25 52 33
1
FirstByteStat
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN InitialState 155
155 10
44 36 48 40
1
InitialState
BEGIN Transition 160
160 40
92 79 92 87
159 162
3 2 1 2
2 45 80 45 81 
0 45 81 45 87 
3 45 87 45 88 
BEGIN Transition 150
150 40
72 31 72 39
118 144
2 2 1 2
2 153 54 154 54 
1 154 54 162 54 
0 162 54 162 57 
3 162 57 162 58 
BEGIN Transition 108
108 40
42 45 42 53
101 103
1 2 3 2
2 91 60 91 59 
0 91 59 91 52 
3 91 52 91 51 
BEGIN Transition 136
136 40
15 47 15 55
129 101
2 1 2 3
2 102 91 103 91 
1 103 91 105 91 
0 105 91 105 66 
1 105 66 101 66 
3 101 66 100 66 
BEGIN Transition 167
167 40
79 105 79 113
162 109
3 2 3 1
2 45 100 45 101 
0 45 101 45 111 
1 45 111 158 111 
0 158 111 158 100 
3 158 100 158 99 
BEGIN Transition 175
175 40
208 17 208 25
171 154
4 2 2 1
2 90 27 89 27 
1 89 27 53 27 
3 53 27 52 27 
BEGIN Transition 165
165 40
92 76 92 84
178 154
2 2 2 3
2 49 49 50 49 
1 50 49 55 49 
0 55 49 55 31 
1 55 31 53 31 
3 53 31 52 31 
BEGIN Transition 168
168 40
66 79 66 87
186 109
4 2 3 1
2 11 93 10 93 
1 10 93 7 93 
0 7 93 7 114 
1 7 114 158 114 
0 158 114 158 100 
3 158 100 158 99 
BEGIN Transition 179
179 40
77 60 77 68
178 159
3 3 1 3
2 30 55 30 56 
0 30 56 30 65 
1 30 65 50 65 
0 50 65 50 67 
3 50 67 50 68 
BEGIN Transition 188
188 40
17 75 17 83
186 178
1 1 4 1
2 15 89 15 88 
0 15 88 15 86 
1 15 86 11 86 
0 11 86 11 52 
1 11 52 23 52 
3 23 52 24 52 
BEGIN Transition 187
187 40
33 65 33 73
159 186
4 2 1 2
2 34 74 33 74 
1 33 74 18 74 
0 18 74 18 88 
3 18 88 18 89 
BEGIN Transition 193
193 40
34 16 34 24
154 154
1 1 1 3
2 36 25 36 24 
0 36 24 36 22 
1 36 22 46 22 
0 46 22 46 24 
3 46 24 46 25 
BEGIN Transition 110
110 40
58 57 58 65
103 171
1 3 3 3
2 95 42 95 41 
0 95 41 95 34 
3 95 34 95 33 
BEGIN Transition 181
181 40
66 54 66 62
178 109
4 2 3 1
2 24 49 23 49 
1 23 49 5 49 
0 5 49 5 117 
1 5 117 158 117 
0 158 117 158 100 
3 158 100 158 99 
BEGIN Transition 141
141 40
26 58 26 66
183 109
3 2 3 1
2 96 137 96 138 
0 96 138 96 140 
1 96 140 98 140 
0 98 140 98 120 
1 98 120 158 120 
0 158 120 158 100 
3 158 100 158 99 
BEGIN Transition 157
157 40
88 52 88 60
154 178
3 3 1 2
2 36 33 36 34 
0 36 34 36 42 
3 36 42 36 43 
BEGIN Transition 163
163 40
91 102 91 110
162 101
2 3 4 1
2 57 97 58 97 
1 58 97 70 97 
0 70 97 70 66 
1 70 66 82 66 
3 82 66 83 66 
BEGIN Transition 156
156 40
63 53 63 61
155 154
1 1 3 1
2 46 36 46 35 
0 46 35 46 34 
3 46 34 46 33 
BEGIN Transition 185
185 40
156 49 156 57
184 118
4 1 3 1
2 136 106 135 106 
1 135 106 117 106 
0 117 106 117 103 
3 117 103 117 102 
BEGIN Transition 146
146 40
55 23 55 31
144 109
3 3 1 1
2 158 71 158 72 
0 158 72 158 94 
3 158 94 158 95 
BEGIN Transition 172
172 40
219 26 219 34
171 109
2 3 2 1
2 111 30 112 30 
1 112 30 188 30 
0 188 30 188 97 
1 188 97 161 97 
3 161 97 160 97 
BEGIN Transition 195
195 40
30 18 30 26
154 109
4 3 3 1
2 31 27 30 27 
1 30 27 3 27 
0 3 27 3 134 
1 3 134 93 134 
0 93 134 93 117 
1 93 117 158 117 
0 158 117 158 100 
3 158 100 158 99 
BEGIN Mesg 158
158 20
14 30 38 46
1
1 1 16777215 65280
157
SER
c==SOH
87
TEXTBEGIN
ctx.getRestBlk();
if (!ctx.closeProb) {
    ctx.errCnt=0;
    ctx.closeProb = -1;
}
TEXTEND
BEGIN GenericState 159
159 10
34 68 57 80
1
CondTransientCheck
0 12632256 0
20
TEXTBEGIN
     POST("*",CONT);
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 161
161 20
45 80 79 95
1
1 1 16777215 65280
160
CONT
ctx.anotherFile
32
TEXTBEGIN
ctx.openFileForTransfer();



TEXTEND
BEGIN GenericState 162
162 10
34 88 57 100
1
CondTransientOpen
0 12632256 0
20
TEXTBEGIN
     POST("*",CONT);
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 164
164 20
57 57 86 68
1
1 1 16777215 65280
163
CONT
ctx.transferringFileD != -1
48
TEXTBEGIN
ctx.sendByte(ACK);
ctx.sendByte(ctx.NCGbyte);

TEXTEND
BEGIN Mesg 166
166 20
55 30 76 46
1
1 1 16777215 65280
165
CONT
!ctx.syncLoss && (ctx.errCnt < errB)  && !ctx.goodBlk
33
TEXTBEGIN
ctx.sendByte(NAK);
ctx.errCnt++;
TEXTEND
BEGIN Mesg 169
169 20
7 109 28 115
1
1 1 16777215 65280
168
TM

20
TEXTBEGIN
ctx.result="Done";

TEXTEND
BEGIN Mesg 170
170 20
45 102 71 115
1
1 1 16777215 65280
167
CONT
ctx.transferringFileD == -1
37
TEXTBEGIN
ctx.cans();
ctx.result="CreatError";
TEXTEND
BEGIN GenericState 171
171 10
90 21 111 33
1
CondTransientEOT
0 12632256 0
20
TEXTBEGIN
     POST("*",CONT);
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 176
176 20
64 16 91 29
1
1 1 16777215 65280
175
CONT
!ctx.closeProb
61
TEXTBEGIN
ctx.sendByte(ACK);
ctx.sendByte(ctx.NCGbyte);
ctx.errCnt=0;
TEXTEND
BEGIN Mesg 177
177 20
166 30 193 41
1
1 1 16777215 65280
172
CONT
ctx.closeProb
38
TEXTBEGIN
ctx.cans(); 
ctx.result="CloseError";
TEXTEND
BEGIN GenericState 178
178 10
24 43 49 55
1
CondlTransientStat
0 12632256 0
20
TEXTBEGIN
     POST("*",CONT);
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 180
180 20
31 55 56 68
1
1 1 16777215 65280
179
CONT
!ctx.syncLoss && (ctx.errCnt < errB) && ctx.goodBlk
26
TEXTBEGIN
ctx.checkForAnotherFile();
TEXTEND
BEGIN Mesg 182
182 20
5 117 45 135
1
1 1 16777215 65280
181
CONT
ctx.syncLoss || ctx.errCnt >= errB
123
TEXTBEGIN
ctx.cans();
if (ctx.syncLoss)
     ctx.result="LossOfSync at Stat Blk";
else
     ctx.result="ExcessiveErrors at Stat";
TEXTEND
BEGIN InitialState 184
184 10
136 104 140 108
1
InitialState
BEGIN GenericState 186
186 10
11 89 25 97
1
Timeout
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 189
189 20
11 62 32 75
1
1 1 16777215 65280
188
SER
c==SOH
32
TEXTBEGIN
ctx.getRestBlk();
ctx.errCnt++;
TEXTEND
BEGIN Note 190
190 50
112 16 153 26
1
0 0 8454016 128
161
TEXTBEGIN
Due to a bug in SmartState studio, in this StateChart, please interpret && as &&&& -- a logical AND.  Do not interpret it as a bitwise AND as you normally would.
TEXTEND
BEGIN Mesg 191
191 20
18 78 41 93
1
1 1 16777215 65280
187
CONT
!ctx.anotherFile
36
TEXTBEGIN
ctx.sendByte(ACK);
ctx.tm(TM_END); 
TEXTEND
BEGIN Mesg 194
194 20
38 9 65 26
1
1 1 16777215 65280
193
SER
c==EOT && !ctx.closeProb && ctx.errCnt < errB
61
TEXTBEGIN
ctx.sendByte(ACK);
ctx.sendByte(ctx.NCGbyte);
ctx.errCnt++;
TEXTEND
BEGIN Mesg 196
196 20
68 123 94 142
1
1 1 16777215 65280
195
SER
c==EOT && !ctx.closeProb && ctx.errCnt >= errB
40
TEXTBEGIN
ctx.cans();
ctx.result="ExcessiveEOTs";
TEXTEND
END DATA
Receiver
ReceiverY
ReceiverY.h

69
INCLUDE BEGIN
#include "AtomicCOUT.h"
//#include <iostream>
#include <stdlib.h>

INCLUDE END
20
DECL BEGIN
#define c wParam


DECL END
Copyright (c) 2021 W. Craig Scratchley
77
DESC BEGIN
 Simple YMODEM Receiver

Copyright (c) 2021 Craig Scratchley
wcs AT sfu.ca
DESC END
0
INCLUDE BEGIN

INCLUDE END
0
DECL BEGIN

DECL END
Context

0
DECL BEGIN

DECL END
Context

0
DECL BEGIN

DECL END
