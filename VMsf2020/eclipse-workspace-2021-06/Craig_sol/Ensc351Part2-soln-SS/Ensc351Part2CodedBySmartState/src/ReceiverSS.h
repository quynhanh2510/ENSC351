////////////////////////////////////////////////
// Generated by SmartState C++ Code Generator //
//                 DO NOT EDIT				  //
////////////////////////////////////////////////

#ifndef Receiver_SS_H
#define Receiver_SS_H

#include <ss_api.hxx>

/*Context*/
class ReceiverY;

namespace Receiver_SS
{
	using namespace smartstate;
	//State Mgr
	class ReceiverSS : public StateMgr
	{
		public:
			ReceiverSS(ReceiverY* ctx, bool startMachine=true);

			ReceiverY& getCtx() const;

		private:
			ReceiverY* myCtx;
	};

	//Base State
	class ReceiverBaseState : public BaseState
	{
		protected:
			ReceiverBaseState(){};
			ReceiverBaseState(const string& name, BaseState* parent, ReceiverSS* mgr);

		protected:
			ReceiverSS* getMgr(){return static_cast<ReceiverSS*>(myMgr);}
	};

	//States
	//------------------------------------------------------------------------
	class Receiver_TopLevel_ReceiverSS : public virtual ReceiverBaseState
	{
			typedef ReceiverBaseState super;

		public:
			Receiver_TopLevel_ReceiverSS(){};
			Receiver_TopLevel_ReceiverSS(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class NON_CAN_Receiver_TopLevel : public virtual Receiver_TopLevel_ReceiverSS
	{
			typedef Receiver_TopLevel_ReceiverSS super;

		public:
			NON_CAN_Receiver_TopLevel(){};
			NON_CAN_Receiver_TopLevel(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class FirstByteData_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			FirstByteData_NON_CAN(){};
			FirstByteData_NON_CAN(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class EOT_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			EOT_NON_CAN(){};
			EOT_NON_CAN(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class CondTransientData_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			CondTransientData_NON_CAN(){};
			CondTransientData_NON_CAN(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onCONTMessage(const Mesg& mesg);
	};

	class FirstByteStat_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			FirstByteStat_NON_CAN(){};
			FirstByteStat_NON_CAN(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

	class CondTransientCheck_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			CondTransientCheck_NON_CAN(){};
			CondTransientCheck_NON_CAN(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onCONTMessage(const Mesg& mesg);
	};

	class CondTransientOpen_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			CondTransientOpen_NON_CAN(){};
			CondTransientOpen_NON_CAN(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onCONTMessage(const Mesg& mesg);
	};

	class CondTransientEOT_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			CondTransientEOT_NON_CAN(){};
			CondTransientEOT_NON_CAN(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onCONTMessage(const Mesg& mesg);
	};

	class CondlTransientStat_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			CondlTransientStat_NON_CAN(){};
			CondlTransientStat_NON_CAN(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onCONTMessage(const Mesg& mesg);
	};

	class Timeout_NON_CAN : public virtual NON_CAN_Receiver_TopLevel
	{
			typedef NON_CAN_Receiver_TopLevel super;

		public:
			Timeout_NON_CAN(){};
			Timeout_NON_CAN(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onTMMessage(const Mesg& mesg);
			void onSERMessage(const Mesg& mesg);
	};

	class CAN_Receiver_TopLevel : public virtual Receiver_TopLevel_ReceiverSS
	{
			typedef Receiver_TopLevel_ReceiverSS super;

		public:
			CAN_Receiver_TopLevel(){};
			CAN_Receiver_TopLevel(const string& name, BaseState* parent, ReceiverSS* mgr);

			virtual void onMessage(const Mesg& mesg);

			virtual void onEntry();
			virtual void onExit();

		//Transitions

		private:
			void onSERMessage(const Mesg& mesg);
	};

};

#endif

//___________________________________vv^^vv___________________________________
